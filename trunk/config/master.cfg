platform="backpack";
#platform="dgc";

#data_dir="/mnt/tig-storage/agile/data";
data_dir="/home/agile/navguide/logs";

classifier {
    calib_file = "/home/agile/navguide/config/calib/splinter-4buckets.txt";
    nbuckets = 4;
#calib_file = "/home/agile/navguide/config/calib/class-calib-2009-07-04-00.txt";
}

cameras {
    backpack {
# the names of the channels have to start with CAM_THUMB if you want them to be logged by the logger
        nsensors=4;
        channels=["CAM_THUMB_RL", "CAM_THUMB_FL", "CAM_THUMB_FR", "CAM_THUMB_RR"];
        unit_ids=["input.dc1394:b09d010070c8fc", "input.dc1394:b09d010070c8dd", "input.dc1394:b09d010070c8fb", "input.dc1394:b09d010070c8f8"];
    }
   splinter {
        nsensors=4;
        channels=["CAM_THUMB_RL", "CAM_THUMB_FL", "CAM_THUMB_FR", "CAM_THUMB_RR"];
	unit_ids=["input.dc1394:b09d010070c8dd", "b09d010070c8dd", "b09d010070c8dd", "b09d010070c8dd"];
    }
    dgc {
        nsensors=4;
        channels=["CAM_THUMB_RFL", "CAM_THUMB_RFC", "CAM_THUMB_RFR", "CAM_THUMB_RRC"];
        unit_ids=["","","",""];
    }
    upward_calib {
# chameleon + tamron 2.8mm
        fc = [ 820.72393,   733.08577];
        cc = [ 622.03151,   548.48756 ];
        kc = [ -0.28107,   0.07814,  -0.00717,   0.00902,  0.00000];

# chameleon + tamron 6.5mm
#        fc = [ 1747.45346,   1738.27472 ];
#        cc = [ 635.21015,   504.61363 ];
#        kc = [ -0.31966,   0.52058,   0.00298,   -0.00011,  0.00000 ];
    }
}

features {
    feature_type="SIFT2";
#feature_type="SIFT";
    max_delay_sec=1;
    scale_factor=1.0;

    sift_doubleimsize=0;
    sift_nscales=4;
    sift_sigma=1.6;
    sift_peakthresh=0.05;

    surf_octaves = 3;
    surf_intervals = 4;
    surf_init_sample = 2;
    surf_threshold = 300;#0.0002;

    fast_threshold = 20;

    gftt_quality=0.01;
    gftt_min_dist=5.0;
    gftt_block_size=3;
    gftt_use_harris=0;
    gftt_harris_param=0.04;
}

tracker {
    max_dist=30.0; # maximum distance between two matches in pixels
        add_min_dist=15.0; # minimum distance to all existing features for a new track
        second_neighbor_ratio=.60; # match is rejected if second neighbor is too close
}

soundfx {
    LEFT {
        say = "LEFT";
#        uri= "left.wav";
    }
    RIGHT {
        say = "RIGHT";
#        uri = "right.wav";
    }
    SLIGHT_LEFT {
        say = "SLIGHT LEFT";
#        uri = "slight_left.wav";
    }
    SLIGHT_RIGHT {
        say = "SLIGHT RIGHT";
#        uri = "slight_right.wav";
    }
    STRAIGHT_AHEAD {
        say = "STRAIGHT AHEAD";
#        uri = "straight_ahead.wav";
    }
    UTURN {
        say = "U TURN";
#        uri = "uturn.wav";
    }
    NEW_NODE {
        say = "NEW NODE";
#        uri = "new_node.wav";
    }
}


